{"version":3,"file":"chrome-launcher.js","sourceRoot":"","sources":["../../src/plugin/chrome-launcher.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\nimport { EventEmitter }  from 'events'\nimport { spawn, ChildProcess } from 'child_process'\nimport { request } from 'http'\nimport { type, arch } from 'os'\n\nexport interface Page {\n  type: string,\n  url: string,\n  webSocketDebuggerUrl?: string\n}\n\nexport type Pages = Array<Page>\n\nexport class ChromeLauncher {\n  public portNumber: number\n  public hostName: string\n  private process: ChildProcess\n  private maxAttempts: number = 3\n  private attempt: number = 0\n  private events: EventEmitter = new EventEmitter()\n  // Events\n  didStop (cb) {\n    this.events.on('didStop', cb)\n  }\n  didFail (cb) {\n    this.events.on('didFail', cb)\n  }\n  didReceiveOutput(cb) {\n    this.events.on('didReceiveOutput', cb)\n  }\n  didReceiveError(cb) {\n    this.events.on('didReceiveError', cb)\n  }\n  // Actions\n  stop () {\n    this.process.kill()\n    this.events.emit('didStop')\n  }\n  start (): Promise<string> {\n    let launchArgs = [\n      `--remote-debugging-address=${this.hostName}`,\n      `--remote-debugging-port=${this.portNumber}`,\n      '--no-first-run',\n      '--disable-extensions',\n      '--disable-component-extensions-with-background-pages',\n      '--no-default-browser-check',\n      '--num-raster-threads=4',\n      '--user-data-dir=$(mktemp -d -t \\'chrome-remote_data_dir\\')'\n    ]\n    let binaryPath = this.getBinaryPath()\n    this.process = spawn(binaryPath, launchArgs, {\n      shell: true\n    })\n    this.process.stdout.on('data', (res: Uint8Array) => {\n      this.events.emit('didReceiveOutput')\n    })\n    this.process.stderr.on('data', (res: Uint8Array) => {\n      console.log(res.toString())\n      this.events.emit('didReceiveError')\n    })\n    this.process.on('close', (code) => {\n      if (code !== 0) {\n        this.events.emit('didFail')\n      }\n      this.events.emit('didStop')\n    })\n    return this.findSocketUrl()\n  }\n  getBinaryPath (): string {\n    let binary = '/usr/bin/google-chrome'\n    switch (type()) {\n      case 'Darwin':\n        binary = '/Applications/Google\\\\ Chrome.app/Contents/MacOS/Google\\\\ Chrome'\n        break\n      case 'Linux':\n        binary = '/usr/bin/google-chrome'\n        break\n      case 'Windows_NT':\n        let osArch = arch()\n        if (osArch === 'x86') {\n          binary = 'C:\\\\Program\\ Files\\ (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\n        } else {\n          binary = 'C:\\\\Program\\ Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\n        }\n        break\n    }\n    return binary\n  }\n  getPages (): Promise<Pages> {\n    return new Promise((resolve, reject) => {\n      let req = request({\n        hostname: this.hostName,\n        port: this.portNumber,\n        path: '/json',\n        method: 'GET'\n      }, (res) => {\n        res.setEncoding('utf8')\n        res.on('data', (chunk) => {\n          try {\n            resolve(JSON.parse(String(chunk)) as Pages)\n          } catch (e) {\n            reject(e)\n          }\n        })\n      })\n      req.on('error', reject)\n      req.end()\n    })\n  }\n  findSocketUrl (): Promise<string> {\n    return new Promise((resolve, reject) => {\n      setTimeout(async () => {\n        let pages = await this\n          .getPages()\n          .catch(() => {\n            if (this.attempt <= this.maxAttempts) {\n              resolve(this.findSocketUrl())\n            } else {\n              reject('unable to get pages')\n            }\n          })\n        let found = (pages || []).find((page: Page) => {\n          return (page.url === 'chrome://newtab/')\n        })\n        if (found) {\n          resolve(found.webSocketDebuggerUrl)\n        } else {\n          reject('unable to find page with socket')\n        }\n      }, 500)\n    })\n  }\n}\n"]}
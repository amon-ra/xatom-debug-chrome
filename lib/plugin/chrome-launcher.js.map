{"version":3,"file":"chrome-launcher.js","sourceRoot":"","sources":["../../src/plugin/chrome-launcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChromeDebuggingProtocolLauncher } from 'xatom-debug-chrome-base/lib/launcher'\nimport { type, arch, platform } from 'os'\nimport { mkdir, stat } from 'fs'\nimport { join } from 'path'\nimport { includes, isEqual, trimEnd } from 'lodash'\nimport { trimPathChars } from './chrome-options'\n\nexport interface Page {\n  type: string,\n  url: string,\n  webSocketDebuggerUrl?: string\n}\n\nexport type Pages = Array<Page>\n\nexport class ChromeLauncher extends ChromeDebuggingProtocolLauncher {\n  public hostName: string\n  public portNumber: number\n  public customBinaryPath: string\n  public url: string\n  public userDataPath: string = join(atom['configDirPath'], 'storage', 'xatom-debug', 'chrome')\n  findPageUrl (page): boolean {\n    return (isEqual(trimEnd(page.url, trimPathChars), this.url)\n      && page.type === 'page'\n      && page.webSocketDebuggerUrl)\n  }\n  createUserData () {\n    this.isUserDataExists().then((exists) => {\n      if (exists === false) {\n        mkdir(this.userDataPath)\n      }\n    });\n  }\n  isUserDataExists () {\n    return new Promise((resolve, reject) => {\n      stat(this.userDataPath, (err, stats) => {\n        if (err) {\n          resolve(false);\n        } else {\n          resolve(stats);\n        }\n      })\n    })\n  }\n  getLauncherArguments () {\n    let chromeArgs = [\n      `--remote-debugging-address=${this.hostName}`,\n      `--remote-debugging-port=${this.portNumber}`,\n      // '--no-first-run',\n      '--no-default-browser-check',\n      '--disable-extensions',\n      '--disable-component-extensions-with-background-pages',\n      // '--num-raster-threads=4'\n    ]\n    if (includes(['darwin', 'linux'], platform())) {\n      chromeArgs.push(`--user-data-dir=${this.userDataPath}`)\n    }\n    if (this.url) {\n      chromeArgs.push(this.url)\n    }\n    return chromeArgs\n  }\n  getBinaryPath (): string {\n    let binary = '/usr/bin/google-chrome'\n    if (this.customBinaryPath) {\n      binary = this.customBinaryPath\n    } else {\n      switch (type()) {\n        case 'Darwin':\n          binary = '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'\n          break\n        case 'Linux':\n          binary = '/usr/bin/google-chrome'\n          break\n        case 'Windows_NT':\n          let osArch = arch()\n          if (osArch === 'x86') {\n            binary = 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\n          } else {\n            binary = 'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\n          }\n          break\n      }\n    }\n    return this.quote(binary)\n  }\n}\n"]}
{"version":3,"file":"chrome-plugin.js","sourceRoot":"","sources":["../../src/plugin/chrome-plugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+DAAoF;AACpF,qDAAkD;AAClD,qDAAkD;AAClD,mDAA4D;AAC5D,6BAAsC;AAEtC;IAAkC,gCAA6B;IAQ7D;QAAA,YACE,iBAAO,SAER;QATM,aAAO,GAAW,8BAAa,CAAA;QAC/B,UAAI,GAAW,eAAe,CAAA;QAC9B,cAAQ,GAAW,0CAA0C,CAAA;QAC7D,cAAQ,GAAmB,IAAI,gCAAc,EAAE,CAAA;QAC/C,cAAQ,GAAmB,IAAI,gCAAc,EAAE,CAAA;QAIpD,KAAI,CAAC,iBAAiB,EAAE,CAAA;;IAC1B,CAAC;IACK,6BAAM,GAAZ;;;yBASM,WAAW,EACX,WAAW,EAOX,eAAe;;;;wBAhBnB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;wBACnB,qBAAM,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAA;;kCAApC,SAAoC;wBAElD,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,WAAW,CAAA;wBACpC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;wBAC7C,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,KAAK,2BAAU,CAAC,MAAM,CAAC,CAAC,CAAC;4BAC7C,IAAI,CAAC,QAAQ,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAA;wBAC3D,CAAC;sCACiB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;sCAC3B,WAAI,CAAC,WAAW,EAAE,OAAO,CAAC,QAAQ,CAAC;wBACrD,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,WAAW,CAAA;wBACpC,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAA;wBAE3C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA;wBAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;wBACxD,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC,SAAS,CAAC,CAAA;0CAClC;4BACpB,aAAa,EAAE,GAAG;4BAClB,eAAe,EAAE,gBAAgB;yBAClC;wBAED,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,OAAO,CAAC,YAAY,CAAC,CAAA;wBACpD,MAAM;6BACH,IAAI,CAAC,eAAe,CAAC;6BACrB,OAAO,CAAC,UAAC,MAAM;4BACd,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,gBAAS,CAAC,WAAI,CAAC,WAAW,EAAE,GAAG,EAAE,eAAe,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA;wBACnG,CAAC,CAAC,CAAA;wBAEJ,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,SAAS,CAAA;wBACrC,IAAI,CAAC,cAAc,EAAE,CAAA;wBACL,qBAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAA;;oCAA3B,SAA2B;wBAC3C,qBAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,EAAA;;wBAAtC,SAAsC,CAAA;wBACtC,IAAI,CAAC,aAAa,EAAE,CAAA;wBACpB,qBAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,EAAA;;wBAAzC,SAAyC,CAAA;wBAEzC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAA;;;;;KACxB;IACH,mBAAC;AAAD,CAAC,AAlDD,CAAkC,sCAA6B,GAkD9D;AAlDY,oCAAY","sourcesContent":["import { ChromeDebuggingProtocolPlugin } from 'atom-bugs-chrome-debugger/lib/plugin'\nimport { ChromeLauncher } from './chrome-launcher'\nimport { ChromeDebugger } from './chrome-debugger'\nimport { BinaryType, ChromeOptions } from './chrome-options'\nimport { normalize, join } from 'path'\n\nexport class ChromePlugin extends ChromeDebuggingProtocolPlugin {\n\n  public options: Object = ChromeOptions\n  public name: String = 'Google Chrome'\n  public iconPath: String = 'atom://atom-bugs-chrome/icons/chrome.svg'\n  public launcher: ChromeLauncher = new ChromeLauncher()\n  public debugger: ChromeDebugger = new ChromeDebugger()\n\n  constructor () {\n    super()\n    this.addEventListeners()\n  }\n  async didRun () {\n    this.pluginClient.console.clear()\n    let options = await this.pluginClient.getOptions()\n    // run chrome\n    this.launcher.hostName = 'localhost'\n    this.launcher.portNumber = options.portNumber\n    if (options.binaryPath === BinaryType.Custom) {\n      this.launcher.customBinaryPath = options.customBinaryPath\n    }\n    let projectPath = this.pluginClient.getPath()\n    let contextPath = join(projectPath, options.basePath)\n    this.debugger.basePath = projectPath\n    this.debugger.serverUrl = options.serverUrl\n\n    this.debugger.setMappings({})\n    this.debugger.addMapping(options.serverUrl, contextPath)\n    this.debugger.addMapping(contextPath, options.serverUrl)\n    let defaultMappings = {\n      'webpack:///': '.',\n      'webpack:///~/': './node_modules'\n    }\n    // add defined mappings\n    Object.assign(defaultMappings, options.mappingPaths)\n    Object\n      .keys(defaultMappings)\n      .forEach((origin) => {\n        this.debugger.addMapping(origin, normalize(join(projectPath, '/', defaultMappings[origin], '/')))\n      })\n\n    this.launcher.url = options.serverUrl\n    this.disableConsole()\n    let socketUrl = await this.launcher.start()\n    await this.debugger.connect(socketUrl)\n    this.enableConsole()\n    await this.debugger.domains.Page.reload()\n    // set toolbar as run\n    this.pluginClient.run()\n  }\n}\n"]}
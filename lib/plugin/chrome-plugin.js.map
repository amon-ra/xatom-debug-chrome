{"version":3,"file":"chrome-plugin.js","sourceRoot":"","sources":["../../src/plugin/chrome-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChromeDebuggingProtocolPlugin } from 'xatom-debug-chrome-base/lib/plugin'\nimport { ChromeLauncher } from './chrome-launcher'\nimport { ChromeDebugger } from './chrome-debugger'\nimport { BinaryType, ChromeOptions } from './chrome-options'\nimport { normalize, join } from 'path'\n\nexport class ChromePlugin extends ChromeDebuggingProtocolPlugin {\n\n  public options: Object = ChromeOptions\n  public name: String = 'Google Chrome'\n  public iconPath: String = 'atom://xatom-debug-chrome/icons/chrome.svg'\n  public launcher: ChromeLauncher = new ChromeLauncher()\n  public debugger: ChromeDebugger = new ChromeDebugger()\n\n  constructor () {\n    super()\n    this.addEventListeners()\n  }\n\n  didLaunchError (message: string) {\n    atom.notifications.addError('XAtom Debug: Google Chrome', {\n      detail: `Launcher error: ${message}`,\n      dismissable: true\n    })\n  }\n\n  async didRun () {\n    try {\n      this.pluginClient.status.startLoading()\n      this.pluginClient.status.update('Running chrome')\n      this.pluginClient.console.clear()\n      let options = await this.pluginClient.getOptions()\n      // run chrome\n      this.launcher.hostName = 'localhost'\n      this.launcher.portNumber = options.portNumber\n      if (options.binaryPath === BinaryType.Custom) {\n        this.launcher.customBinaryPath = options.customBinaryPath\n      } else {\n        this.launcher.customBinaryPath = null\n      }\n      let projectPath = this.pluginClient.getPath()\n      let contextPath = join(projectPath, options.basePath)\n      this.debugger.basePath = projectPath\n      this.debugger.serverUrl = options.serverUrl\n\n      this.debugger.setMappings({})\n      this.debugger.addMapping(options.serverUrl, contextPath)\n      this.debugger.addMapping(contextPath, options.serverUrl)\n      let defaultMappings = {\n        'webpack:///./': '.',\n        'webpack:///./~/': './node_modules'\n      }\n      // add defined mappings\n      Object.assign(defaultMappings, options.mappingPaths)\n      Object\n        .keys(defaultMappings)\n        .forEach((origin) => {\n          this.debugger.addMapping(origin, normalize(join(projectPath, '/', defaultMappings[origin], '/')))\n        })\n\n      this.launcher.url = options.serverUrl\n      this.disableConsole()\n      let socketUrl = await this.launcher.start()\n      if (socketUrl) {\n        this.pluginClient.status.update('Connecting to Debugger')\n        this.pluginClient.run()\n        await this.debugger.connect(socketUrl)\n        this.pluginClient.status.update('Debugger Attached', 'status-success')\n        this.pluginClient.status.stopLoading()\n        this.enableConsole()\n        // await this.debugger.domains.Page.reload()\n      }\n    } catch (e) {\n      this.pluginClient.status.update(e, 'status-error')\n      this.pluginClient.status.stopLoading()\n    }\n  }\n}\n"]}
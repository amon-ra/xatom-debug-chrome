{"version":3,"file":"chrome-debugger.js","sourceRoot":"","sources":["../../src/plugin/chrome-debugger.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mEAAwF;AACxF,6BAAsC;AAEtC;IAAoC,kCAA+B;IAIjE;eACE,iBAAO;IACT,CAAC;IACD,2CAAkB,GAAlB,UAAoB,OAAe;QAAnC,iBAqBC;QApBC,IAAI,QAAQ,GAAG,OAAO,CAAA;QACtB,MAAM;aACH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;aACvB,OAAO,CAAC,UAAC,MAAM;YACd,IAAI,MAAM,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;YACtC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,MAAI,MAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAA;gBAC7C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,QAAQ,GAAG,OAAO;yBACf,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;yBAEvB,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAA;gBAClC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAI,UAAU,GAAG,gBAAS,CAAC,WAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAA;oBAC7C,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;gBAChD,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;QAEJ,MAAM,CAAC,QAAQ,CAAA;IACjB,CAAC;IACD,oCAAW,GAAX;QACM,IAAA,iBAKY,EAJd,sBAAQ,EACR,oBAAO,EACP,sBAAQ,EACR,cAAI,CACU;QAChB,QAAQ,CAAC,MAAM,CAAC;YACd,IAAI,CAAC,gBAAgB,CAAC;gBACpB,OAAO,EAAE,uBAAuB;aACjC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QACF,QAAQ,CAAC,OAAO,CAAC;YACf,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;QACF,MAAM,CAAC;YACL,IAAI,CAAC,MAAM,EAAE;YACb,OAAO,CAAC,MAAM,EAAE;YAChB,QAAQ,CAAC,MAAM,EAAE;YACjB,QAAQ,CAAC,oBAAoB,CAAC;gBAC5B,MAAM,EAAE,IAAI;aACb,CAAC;SACH,CAAA;IACH,CAAC;IACH,qBAAC;AAAD,CAAC,AArDD,CAAoC,0CAA+B,GAqDlE;AArDY,wCAAc","sourcesContent":["import { ChromeDebuggingProtocolDebugger } from 'atom-bugs-chrome-debugger/lib/debugger'\nimport { join, normalize } from 'path'\n\nexport class ChromeDebugger extends ChromeDebuggingProtocolDebugger {\n  public basePath: string\n  public mappingPaths: Object\n  public serverUrl: string\n  constructor () {\n    super()\n  }\n  getFilePathFromUrl (fileUrl: string): string {\n    let filePath = fileUrl\n    Object\n      .keys(this.mappingPaths)\n      .forEach((origin) => {\n        let target = this.mappingPaths[origin]\n        if (fileUrl.match(new RegExp(`^${origin}`))) {\n          let isUrl = target.match(/(http|https):\\/\\//)\n          if (isUrl) {\n            filePath = fileUrl\n              .replace(origin, target)\n              // .replace(/\\?(.+)$/, '')\n              .replace(/([^:]\\/)\\/+/g, \"$1\")\n          } else {\n            let pathTarget = normalize(join(target, '/'))\n            filePath = fileUrl.replace(origin, pathTarget)\n          }\n        }\n      })\n    // console.log('transform', fileUrl, filePath)\n    return filePath\n  }\n  getFeatures (): Array<Promise<any>> {\n    var {\n      Profiler,\n      Runtime,\n      Debugger,\n      Page\n    } = this.domains\n    Debugger.paused(() => {\n      Page.configureOverlay({\n        message: 'Paused from Atom Bugs'\n      })\n    })\n    Debugger.resumed(() => {\n      Page.configureOverlay({})\n    })\n    return [\n      Page.enable(),\n      Runtime.enable(),\n      Debugger.enable(),\n      Debugger.setBreakpointsActive({\n        active: true\n      })\n    ]\n  }\n}\n"]}
{"version":3,"file":"chrome-debugger.js","sourceRoot":"","sources":["../../src/plugin/chrome-debugger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iEAAsF;AACtF,6BAAsC;AACtC,iCAAyD;AACzD,2BAA2C;AAC3C,mDAAgD;AAEhD;IAAoC,kCAA+B;IAIjE;QAAA,YACE,iBAAO,SACR;QAJM,kBAAY,GAAW,EAAE,CAAA;;IAIhC,CAAC;IACD,oCAAW,GAAX,UAAa,KAAa;QACxB,IAAI,CAAC,YAAY,GAAG,KAAK,IAAI,EAAE,CAAA;IACjC,CAAC;IACD,mCAAU,GAAV,UAAW,WAAmB,EAAE,aAAqB;QACnD,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,aAAa,CAAA;IAChD,CAAC;IACD,2CAAkB,GAAlB,UAAoB,OAAe;QAAnC,iBAsBC;QArBC,IAAI,QAAQ,GAAG,OAAO,CAAA;QACtB,MAAM;aACH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;aACvB,OAAO,CAAC,UAAC,MAAM;YACd,IAAI,MAAM,GAAG,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;YACtC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,MAAI,qBAAY,CAAC,MAAM,CAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1D,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAA;gBAChD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,IAAI,WAAW,GAAG,OAAO;yBACtB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;yBAEnB,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAA;oBAChC,QAAQ,GAAG,aAAU,CAAC,MAAM,EAAE,kBAAS,CAAC,WAAW,EAAE,8BAAa,CAAC,CAAC,CAAA;gBACtE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAI,UAAU,GAAG,gBAAS,CAAC,gBAAO,CAAC,MAAM,EAAE,8BAAa,CAAC,CAAC,CAAA;oBAC1D,IAAI,gBAAgB,GAAG,kBAAS,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,8BAAa,CAAC,CAAA;oBAC5E,QAAQ,GAAG,WAAI,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAA;gBAC/C,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;QACJ,MAAM,CAAC,QAAQ,CAAA;IACjB,CAAC;IACK,mCAAU,GAAhB,UAAkB,OAAO;;gBACjB,OAAO,EAAE,QAAQ,EAAE,IAAI;;;;kCAAK,OAAO,qBAAP,OAAO,kBAAP,OAAO;wBACzC,QAAQ,CAAC,MAAM,CAAC;4BACd,IAAI,CAAC,gBAAgB,CAAC;gCACpB,OAAO,EAAE,uBAAuB;6BACjC,CAAC,CAAA;wBACJ,CAAC,CAAC,CAAA;wBACF,QAAQ,CAAC,OAAO,CAAC;4BACf,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAA;wBAC3B,CAAC,CAAC,CAAA;wBACK,WAAM,OAAO,CAAC,GAAG,CAAC;gCACvB,IAAI,CAAC,MAAM,EAAE;gCACb,OAAO,CAAC,MAAM,EAAE;gCAEhB,QAAQ,CAAC,MAAM,EAAE;6BAMlB,CAAC,EAAA;4BAVF,WAAO,SAUL,EAAA;;;;KACH;IACH,qBAAC;AAAD,CAAC,AA1DD,CAAoC,0CAA+B,GA0DlE;AA1DY,wCAAc","sourcesContent":["import { ChromeDebuggingProtocolDebugger } from 'xatom-debug-chrome-base/lib/debugger'\nimport { join, normalize } from 'path'\nimport { trimStart, trimEnd, escapeRegExp } from 'lodash'\nimport { resolve as resolveUrl } from 'url'\nimport { trimPathChars } from './chrome-options'\n\nexport class ChromeDebugger extends ChromeDebuggingProtocolDebugger {\n  public basePath: string\n  public mappingPaths: Object = {}\n  public serverUrl: string\n  constructor () {\n    super()\n  }\n  setMappings (value: Object) {\n    this.mappingPaths = value || {}\n  }\n  addMapping(mappingPath: string, mappingTarget: string) {\n    this.mappingPaths[mappingPath] = mappingTarget\n  }\n  getFilePathFromUrl (fileUrl: string): string {\n    let filePath = fileUrl\n    Object\n      .keys(this.mappingPaths)\n      .forEach((origin) => {\n        let target = this.mappingPaths[origin]\n        if (fileUrl.match(new RegExp(`^${escapeRegExp(origin)}`))) {\n          let isUrl = target.match(/(http|https|ws):\\/\\//)\n          if (isUrl) {\n            let urlRelative = fileUrl\n              .replace(origin, '')\n              // .replace(/\\?(.+)$/, '')\n              .replace(/([^:]\\/)\\/+/g, \"$1\")\n            filePath = resolveUrl(target, trimStart(urlRelative, trimPathChars))\n          } else {\n            let pathTarget = normalize(trimEnd(target, trimPathChars))\n            let fileRelativePath = trimStart(fileUrl.replace(origin, ''), trimPathChars)\n            filePath = join(pathTarget, fileRelativePath)\n          }\n        }\n      })\n    return filePath\n  }\n  async didConnect (domains): Promise<any> {\n    var { Runtime, Debugger, Page } = domains\n    Debugger.paused(() => {\n      Page.configureOverlay({\n        message: 'Paused from Atom Bugs'\n      })\n    })\n    Debugger.resumed(() => {\n      Page.configureOverlay({})\n    })\n    return await Promise.all([\n      Page.enable(),\n      Runtime.enable(),\n      // Runtime.runIfWaitingForDebugger(),\n      Debugger.enable(),\n      // Debugger.setPauseOnExceptions({ state: 'none' }),\n      // Debugger.setAsyncCallStackDepth({ maxDepth: 0 }),\n      // Debugger.setBreakpointsActive({\n      //   active: true\n      // })\n    ])\n  }\n}\n"]}